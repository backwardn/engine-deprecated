// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	VersionRequest
	VersionResponse
	ParseRequest
	ParseResponse
	ListDriversRequest
	ListDriversResponse
	SQLRequest
	SQLResponse
	StartComponentRequest
	StartComponentResponse
	StopComponentRequest
	StopComponentResponse
	VersionedDriver
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ParseRequest_Kind int32

const (
	ParseRequest_INVALID ParseRequest_Kind = 0
	ParseRequest_LANG    ParseRequest_Kind = 1
	ParseRequest_UAST    ParseRequest_Kind = 2
)

var ParseRequest_Kind_name = map[int32]string{
	0: "INVALID",
	1: "LANG",
	2: "UAST",
}
var ParseRequest_Kind_value = map[string]int32{
	"INVALID": 0,
	"LANG":    1,
	"UAST":    2,
}

func (x ParseRequest_Kind) String() string {
	return proto.EnumName(ParseRequest_Kind_name, int32(x))
}
func (ParseRequest_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type ParseRequest_UastMode int32

const (
	ParseRequest_SEMANTIC  ParseRequest_UastMode = 0
	ParseRequest_ANNOTATED ParseRequest_UastMode = 1
	ParseRequest_NATIVE    ParseRequest_UastMode = 2
)

var ParseRequest_UastMode_name = map[int32]string{
	0: "SEMANTIC",
	1: "ANNOTATED",
	2: "NATIVE",
}
var ParseRequest_UastMode_value = map[string]int32{
	"SEMANTIC":  0,
	"ANNOTATED": 1,
	"NATIVE":    2,
}

func (x ParseRequest_UastMode) String() string {
	return proto.EnumName(ParseRequest_UastMode_name, int32(x))
}
func (ParseRequest_UastMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

type ParseResponse_Kind int32

const (
	ParseResponse_INVALID ParseResponse_Kind = 0
	ParseResponse_LOG     ParseResponse_Kind = 1
	ParseResponse_FINAL   ParseResponse_Kind = 2
)

var ParseResponse_Kind_name = map[int32]string{
	0: "INVALID",
	1: "LOG",
	2: "FINAL",
}
var ParseResponse_Kind_value = map[string]int32{
	"INVALID": 0,
	"LOG":     1,
	"FINAL":   2,
}

func (x ParseResponse_Kind) String() string {
	return proto.EnumName(ParseResponse_Kind_name, int32(x))
}
func (ParseResponse_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ParseRequest struct {
	Kind    ParseRequest_Kind `protobuf:"varint,1,opt,name=kind,enum=ParseRequest_Kind" json:"kind,omitempty"`
	Name    string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Content []byte            `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// used for UAST only
	Lang  string                `protobuf:"bytes,4,opt,name=lang" json:"lang,omitempty"`
	Query string                `protobuf:"bytes,5,opt,name=query" json:"query,omitempty"`
	Mode  ParseRequest_UastMode `protobuf:"varint,6,opt,name=mode,enum=ParseRequest_UastMode" json:"mode,omitempty"`
}

func (m *ParseRequest) Reset()                    { *m = ParseRequest{} }
func (m *ParseRequest) String() string            { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()               {}
func (*ParseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ParseRequest) GetKind() ParseRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return ParseRequest_INVALID
}

func (m *ParseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParseRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ParseRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *ParseRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ParseRequest) GetMode() ParseRequest_UastMode {
	if m != nil {
		return m.Mode
	}
	return ParseRequest_SEMANTIC
}

type ParseResponse struct {
	Kind ParseResponse_Kind `protobuf:"varint,1,opt,name=kind,enum=ParseResponse_Kind" json:"kind,omitempty"`
	Lang string             `protobuf:"bytes,2,opt,name=lang" json:"lang,omitempty"`
	Uast [][]byte           `protobuf:"bytes,3,rep,name=uast,proto3" json:"uast,omitempty"`
	Log  string             `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
}

func (m *ParseResponse) Reset()                    { *m = ParseResponse{} }
func (m *ParseResponse) String() string            { return proto.CompactTextString(m) }
func (*ParseResponse) ProtoMessage()               {}
func (*ParseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ParseResponse) GetKind() ParseResponse_Kind {
	if m != nil {
		return m.Kind
	}
	return ParseResponse_INVALID
}

func (m *ParseResponse) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *ParseResponse) GetUast() [][]byte {
	if m != nil {
		return m.Uast
	}
	return nil
}

func (m *ParseResponse) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

type ListDriversRequest struct {
}

func (m *ListDriversRequest) Reset()                    { *m = ListDriversRequest{} }
func (m *ListDriversRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDriversRequest) ProtoMessage()               {}
func (*ListDriversRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ListDriversResponse struct {
	Drivers []*ListDriversResponse_DriverInfo `protobuf:"bytes,1,rep,name=drivers" json:"drivers,omitempty"`
}

func (m *ListDriversResponse) Reset()                    { *m = ListDriversResponse{} }
func (m *ListDriversResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDriversResponse) ProtoMessage()               {}
func (*ListDriversResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListDriversResponse) GetDrivers() []*ListDriversResponse_DriverInfo {
	if m != nil {
		return m.Drivers
	}
	return nil
}

type ListDriversResponse_DriverInfo struct {
	Lang    string `protobuf:"bytes,1,opt,name=lang" json:"lang,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *ListDriversResponse_DriverInfo) Reset()         { *m = ListDriversResponse_DriverInfo{} }
func (m *ListDriversResponse_DriverInfo) String() string { return proto.CompactTextString(m) }
func (*ListDriversResponse_DriverInfo) ProtoMessage()    {}
func (*ListDriversResponse_DriverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

func (m *ListDriversResponse_DriverInfo) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *ListDriversResponse_DriverInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type SQLRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *SQLRequest) Reset()                    { *m = SQLRequest{} }
func (m *SQLRequest) String() string            { return proto.CompactTextString(m) }
func (*SQLRequest) ProtoMessage()               {}
func (*SQLRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SQLRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type SQLResponse struct {
	Row *SQLResponse_Row `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
}

func (m *SQLResponse) Reset()                    { *m = SQLResponse{} }
func (m *SQLResponse) String() string            { return proto.CompactTextString(m) }
func (*SQLResponse) ProtoMessage()               {}
func (*SQLResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SQLResponse) GetRow() *SQLResponse_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type SQLResponse_Row struct {
	Cell [][]byte `protobuf:"bytes,1,rep,name=cell,proto3" json:"cell,omitempty"`
}

func (m *SQLResponse_Row) Reset()                    { *m = SQLResponse_Row{} }
func (m *SQLResponse_Row) String() string            { return proto.CompactTextString(m) }
func (*SQLResponse_Row) ProtoMessage()               {}
func (*SQLResponse_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *SQLResponse_Row) GetCell() [][]byte {
	if m != nil {
		return m.Cell
	}
	return nil
}

type StartComponentRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Port is the public port binding.
	// If Port is 0, the one set in the initial daemon config will be used.
	// If Port is -1, the public port will be the same as the private one.
	Port int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *StartComponentRequest) Reset()                    { *m = StartComponentRequest{} }
func (m *StartComponentRequest) String() string            { return proto.CompactTextString(m) }
func (*StartComponentRequest) ProtoMessage()               {}
func (*StartComponentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StartComponentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StartComponentRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type StartComponentResponse struct {
	// Port is the public port binding for the container.
	// It may be 0 if the container does not have a port binding.
	Port int32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
}

func (m *StartComponentResponse) Reset()                    { *m = StartComponentResponse{} }
func (m *StartComponentResponse) String() string            { return proto.CompactTextString(m) }
func (*StartComponentResponse) ProtoMessage()               {}
func (*StartComponentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StartComponentResponse) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type StopComponentRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *StopComponentRequest) Reset()                    { *m = StopComponentRequest{} }
func (m *StopComponentRequest) String() string            { return proto.CompactTextString(m) }
func (*StopComponentRequest) ProtoMessage()               {}
func (*StopComponentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StopComponentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StopComponentResponse struct {
}

func (m *StopComponentResponse) Reset()                    { *m = StopComponentResponse{} }
func (m *StopComponentResponse) String() string            { return proto.CompactTextString(m) }
func (*StopComponentResponse) ProtoMessage()               {}
func (*StopComponentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type VersionedDriver struct {
	Language string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *VersionedDriver) Reset()                    { *m = VersionedDriver{} }
func (m *VersionedDriver) String() string            { return proto.CompactTextString(m) }
func (*VersionedDriver) ProtoMessage()               {}
func (*VersionedDriver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *VersionedDriver) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *VersionedDriver) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "VersionResponse")
	proto.RegisterType((*ParseRequest)(nil), "ParseRequest")
	proto.RegisterType((*ParseResponse)(nil), "ParseResponse")
	proto.RegisterType((*ListDriversRequest)(nil), "ListDriversRequest")
	proto.RegisterType((*ListDriversResponse)(nil), "ListDriversResponse")
	proto.RegisterType((*ListDriversResponse_DriverInfo)(nil), "ListDriversResponse.DriverInfo")
	proto.RegisterType((*SQLRequest)(nil), "SQLRequest")
	proto.RegisterType((*SQLResponse)(nil), "SQLResponse")
	proto.RegisterType((*SQLResponse_Row)(nil), "SQLResponse.Row")
	proto.RegisterType((*StartComponentRequest)(nil), "StartComponentRequest")
	proto.RegisterType((*StartComponentResponse)(nil), "StartComponentResponse")
	proto.RegisterType((*StopComponentRequest)(nil), "StopComponentRequest")
	proto.RegisterType((*StopComponentResponse)(nil), "StopComponentResponse")
	proto.RegisterType((*VersionedDriver)(nil), "VersionedDriver")
	proto.RegisterEnum("ParseRequest_Kind", ParseRequest_Kind_name, ParseRequest_Kind_value)
	proto.RegisterEnum("ParseRequest_UastMode", ParseRequest_UastMode_name, ParseRequest_UastMode_value)
	proto.RegisterEnum("ParseResponse_Kind", ParseResponse_Kind_name, ParseResponse_Kind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Engine service

type EngineClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// A single response with the parsing result.
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error)
	// A stream of responses with logs and finally the parsing result.
	ParseWithLogs(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (Engine_ParseWithLogsClient, error)
	// Driver management.
	// List all drivers.
	ListDrivers(ctx context.Context, in *ListDriversRequest, opts ...grpc.CallOption) (*ListDriversResponse, error)
	// SQL stuff.
	SQL(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (Engine_SQLClient, error)
	// Start a component.
	StartComponent(ctx context.Context, in *StartComponentRequest, opts ...grpc.CallOption) (*StartComponentResponse, error)
	// Stop a component.
	StopComponent(ctx context.Context, in *StopComponentRequest, opts ...grpc.CallOption) (*StopComponentResponse, error)
}

type engineClient struct {
	cc *grpc.ClientConn
}

func NewEngineClient(cc *grpc.ClientConn) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/Engine/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error) {
	out := new(ParseResponse)
	err := grpc.Invoke(ctx, "/Engine/Parse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) ParseWithLogs(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (Engine_ParseWithLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Engine_serviceDesc.Streams[0], c.cc, "/Engine/ParseWithLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineParseWithLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Engine_ParseWithLogsClient interface {
	Recv() (*ParseResponse, error)
	grpc.ClientStream
}

type engineParseWithLogsClient struct {
	grpc.ClientStream
}

func (x *engineParseWithLogsClient) Recv() (*ParseResponse, error) {
	m := new(ParseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engineClient) ListDrivers(ctx context.Context, in *ListDriversRequest, opts ...grpc.CallOption) (*ListDriversResponse, error) {
	out := new(ListDriversResponse)
	err := grpc.Invoke(ctx, "/Engine/ListDrivers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) SQL(ctx context.Context, in *SQLRequest, opts ...grpc.CallOption) (Engine_SQLClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Engine_serviceDesc.Streams[1], c.cc, "/Engine/SQL", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineSQLClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Engine_SQLClient interface {
	Recv() (*SQLResponse, error)
	grpc.ClientStream
}

type engineSQLClient struct {
	grpc.ClientStream
}

func (x *engineSQLClient) Recv() (*SQLResponse, error) {
	m := new(SQLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engineClient) StartComponent(ctx context.Context, in *StartComponentRequest, opts ...grpc.CallOption) (*StartComponentResponse, error) {
	out := new(StartComponentResponse)
	err := grpc.Invoke(ctx, "/Engine/StartComponent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) StopComponent(ctx context.Context, in *StopComponentRequest, opts ...grpc.CallOption) (*StopComponentResponse, error) {
	out := new(StopComponentResponse)
	err := grpc.Invoke(ctx, "/Engine/StopComponent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Engine service

type EngineServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// A single response with the parsing result.
	Parse(context.Context, *ParseRequest) (*ParseResponse, error)
	// A stream of responses with logs and finally the parsing result.
	ParseWithLogs(*ParseRequest, Engine_ParseWithLogsServer) error
	// Driver management.
	// List all drivers.
	ListDrivers(context.Context, *ListDriversRequest) (*ListDriversResponse, error)
	// SQL stuff.
	SQL(*SQLRequest, Engine_SQLServer) error
	// Start a component.
	StartComponent(context.Context, *StartComponentRequest) (*StartComponentResponse, error)
	// Stop a component.
	StopComponent(context.Context, *StopComponentRequest) (*StopComponentResponse, error)
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Engine/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Engine/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_ParseWithLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ParseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineServer).ParseWithLogs(m, &engineParseWithLogsServer{stream})
}

type Engine_ParseWithLogsServer interface {
	Send(*ParseResponse) error
	grpc.ServerStream
}

type engineParseWithLogsServer struct {
	grpc.ServerStream
}

func (x *engineParseWithLogsServer) Send(m *ParseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Engine_ListDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).ListDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Engine/ListDrivers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).ListDrivers(ctx, req.(*ListDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_SQL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SQLRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineServer).SQL(m, &engineSQLServer{stream})
}

type Engine_SQLServer interface {
	Send(*SQLResponse) error
	grpc.ServerStream
}

type engineSQLServer struct {
	grpc.ServerStream
}

func (x *engineSQLServer) Send(m *SQLResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Engine_StartComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).StartComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Engine/StartComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).StartComponent(ctx, req.(*StartComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_StopComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).StopComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Engine/StopComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).StopComponent(ctx, req.(*StopComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Engine_Version_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _Engine_Parse_Handler,
		},
		{
			MethodName: "ListDrivers",
			Handler:    _Engine_ListDrivers_Handler,
		},
		{
			MethodName: "StartComponent",
			Handler:    _Engine_StartComponent_Handler,
		},
		{
			MethodName: "StopComponent",
			Handler:    _Engine_StopComponent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ParseWithLogs",
			Handler:       _Engine_ParseWithLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SQL",
			Handler:       _Engine_SQL_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdb, 0x6e, 0xd3, 0x4c,
	0x10, 0xf6, 0x29, 0xa7, 0xc9, 0xa1, 0xd6, 0x34, 0x4d, 0xfd, 0xfb, 0xe6, 0xaf, 0x56, 0x88, 0x46,
	0x05, 0xad, 0x50, 0x7a, 0x45, 0x6f, 0xc0, 0x6a, 0x43, 0x15, 0xe1, 0xba, 0xd4, 0x49, 0xcb, 0xb5,
	0x69, 0x96, 0x60, 0x91, 0x7a, 0x53, 0xdb, 0xa1, 0xe2, 0x1d, 0x78, 0x00, 0x24, 0x1e, 0x16, 0xe4,
	0xb5, 0x9d, 0xda, 0xc1, 0x08, 0xee, 0x66, 0x67, 0xbe, 0x9d, 0xd3, 0xf7, 0xed, 0x42, 0xcb, 0x5b,
	0xf9, 0x74, 0x15, 0xf2, 0x98, 0x13, 0x1d, 0x7a, 0x37, 0x2c, 0x8c, 0x7c, 0x1e, 0xb8, 0xec, 0x7e,
	0xcd, 0xa2, 0x98, 0x3c, 0x83, 0x9d, 0x8d, 0x27, 0x5a, 0xf1, 0x20, 0x62, 0x68, 0x40, 0xe3, 0x4b,
	0xea, 0x32, 0xe4, 0x03, 0x79, 0xd8, 0x72, 0xf3, 0x23, 0xf9, 0xae, 0x40, 0xe7, 0x9d, 0x17, 0x46,
	0x2c, 0xbb, 0x8d, 0x4f, 0x41, 0xfb, 0xec, 0x07, 0x73, 0x81, 0xeb, 0x8d, 0x90, 0x16, 0x83, 0xf4,
	0xad, 0x1f, 0xcc, 0x5d, 0x11, 0x47, 0x04, 0x2d, 0xf0, 0xee, 0x98, 0xa1, 0x88, 0x7c, 0xc2, 0x4e,
	0xca, 0xdc, 0xf2, 0x20, 0x66, 0x41, 0x6c, 0xa8, 0x07, 0xf2, 0xb0, 0xe3, 0xe6, 0xc7, 0x04, 0xbd,
	0xf4, 0x82, 0x85, 0xa1, 0xa5, 0xe8, 0xc4, 0xc6, 0x3e, 0xd4, 0xee, 0xd7, 0x2c, 0xfc, 0x6a, 0xd4,
	0x84, 0x33, 0x3d, 0xe0, 0x11, 0x68, 0x77, 0x7c, 0xce, 0x8c, 0xba, 0xa8, 0x3f, 0x28, 0xd7, 0xbf,
	0xf6, 0xa2, 0xf8, 0x82, 0xcf, 0x99, 0x2b, 0x30, 0xe4, 0x10, 0xb4, 0xa4, 0x23, 0x6c, 0x43, 0x63,
	0xe2, 0xdc, 0x58, 0xf6, 0xe4, 0x4c, 0x97, 0xb0, 0x09, 0x9a, 0x6d, 0x39, 0xe7, 0xba, 0x9c, 0x58,
	0xd7, 0xd6, 0x74, 0xa6, 0x2b, 0xe4, 0x18, 0x9a, 0xf9, 0x55, 0xec, 0x40, 0x73, 0x3a, 0xbe, 0xb0,
	0x9c, 0xd9, 0xe4, 0x54, 0x97, 0xb0, 0x0b, 0x2d, 0xcb, 0x71, 0x2e, 0x67, 0xd6, 0x6c, 0x7c, 0xa6,
	0xcb, 0x08, 0x50, 0x77, 0xac, 0xd9, 0xe4, 0x66, 0xac, 0x2b, 0xe4, 0x87, 0x0c, 0xdd, 0xac, 0x7a,
	0xb6, 0xc6, 0xc3, 0xd2, 0x6e, 0x76, 0x69, 0x29, 0xba, 0xb5, 0x1c, 0x31, 0xae, 0x52, 0x18, 0x17,
	0x41, 0x5b, 0x7b, 0x51, 0xb2, 0x19, 0x75, 0xd8, 0x71, 0x85, 0x8d, 0x3a, 0xa8, 0x4b, 0x9e, 0x6f,
	0x25, 0x31, 0xab, 0x47, 0x6a, 0x80, 0x6a, 0x5f, 0x26, 0x13, 0xb5, 0xa0, 0xf6, 0x66, 0xe2, 0x58,
	0xb6, 0xae, 0x90, 0x3e, 0xa0, 0xed, 0x47, 0xf1, 0x59, 0xe8, 0x27, 0x54, 0xe6, 0xdc, 0x7f, 0x93,
	0x61, 0xb7, 0xe4, 0xce, 0x3a, 0x7f, 0x09, 0x8d, 0x79, 0xea, 0x32, 0xe4, 0x03, 0x75, 0xd8, 0x1e,
	0xfd, 0x4f, 0x2b, 0x60, 0x34, 0x3d, 0x4f, 0x82, 0x8f, 0xdc, 0xcd, 0xf1, 0xe6, 0x09, 0xc0, 0xa3,
	0x7b, 0x33, 0x99, 0x5c, 0x98, 0xac, 0xa0, 0x2e, 0xa5, 0xac, 0x2e, 0x02, 0x30, 0xbd, 0xb2, 0x73,
	0x69, 0x6d, 0x08, 0x97, 0x0b, 0x84, 0x13, 0x1b, 0xda, 0x02, 0x93, 0x75, 0x4a, 0x40, 0x0d, 0xf9,
	0x83, 0x80, 0xb4, 0x47, 0x3a, 0x2d, 0x84, 0xa8, 0xcb, 0x1f, 0xdc, 0x24, 0x68, 0xfe, 0x07, 0xaa,
	0xcb, 0x1f, 0x92, 0x5e, 0x6e, 0xd9, 0x72, 0x29, 0x26, 0xea, 0xb8, 0xc2, 0x26, 0xaf, 0x60, 0x6f,
	0x1a, 0x7b, 0x61, 0x7c, 0xca, 0xef, 0x56, 0x3c, 0x60, 0x41, 0x9c, 0x17, 0xcf, 0xf5, 0x2a, 0x17,
	0xf4, 0x8a, 0xa0, 0xad, 0x78, 0x18, 0x8b, 0xae, 0x6b, 0xae, 0xb0, 0xc9, 0x73, 0x18, 0x6c, 0x27,
	0xc8, 0x3a, 0xcb, 0xd1, 0x72, 0x01, 0x7d, 0x04, 0xfd, 0x69, 0xcc, 0x57, 0xff, 0x52, 0x8d, 0xec,
	0x27, 0xad, 0x95, 0xb0, 0x69, 0x62, 0x72, 0xbe, 0x79, 0xb0, 0x6c, 0x9e, 0xae, 0x1a, 0x4d, 0x68,
	0x26, 0xab, 0x5d, 0x7b, 0x8b, 0x3c, 0xc7, 0xe6, 0xfc, 0xe7, 0x75, 0x8f, 0x7e, 0x2a, 0x50, 0x1f,
	0x07, 0x0b, 0x3f, 0x60, 0x48, 0xa1, 0x91, 0xe5, 0xc4, 0x1d, 0x5a, 0xfe, 0x20, 0x4c, 0x9d, 0x6e,
	0xfd, 0x0f, 0x44, 0xc2, 0x21, 0xd4, 0x84, 0x9a, 0xb1, 0x5b, 0x7a, 0x71, 0x66, 0xaf, 0x2c, 0x72,
	0x22, 0xe1, 0x28, 0x7b, 0x15, 0xef, 0xfd, 0xf8, 0x93, 0xcd, 0x17, 0xd1, 0x5f, 0x6f, 0xbc, 0x90,
	0xf1, 0x04, 0xda, 0x05, 0xb9, 0xe1, 0x2e, 0xfd, 0x5d, 0xba, 0x66, 0xbf, 0x4a, 0x91, 0x44, 0xc2,
	0x27, 0xa0, 0x4e, 0xaf, 0x6c, 0x6c, 0xd3, 0x47, 0x25, 0x99, 0x9d, 0xa2, 0x2e, 0x44, 0x85, 0x53,
	0xe8, 0x95, 0x69, 0xc3, 0x01, 0xad, 0x14, 0x82, 0xb9, 0x4f, 0xab, 0xf9, 0x25, 0x12, 0xbe, 0x86,
	0x6e, 0x89, 0x21, 0xdc, 0xa3, 0x55, 0xec, 0x9a, 0x03, 0x5a, 0x4d, 0xa4, 0xf4, 0xa1, 0x2e, 0x3e,
	0xe5, 0xe3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xc6, 0x0a, 0x40, 0xa1, 0x05, 0x00, 0x00,
}
